package gearsoftware.gearhub.servicesimpl.squaregearimport android.annotation.SuppressLintimport gearsoftware.gearhub.di.Scopesimport gearsoftware.gearhub.serviceprovider.AbstractSapWebServiceimport gearsoftware.gearhub.serviceprovider.SapNotificationProviderimport gearsoftware.gearhub.services.SapPermissionServiceimport gearsoftware.gearhub.services.SapServiceimport gearsoftware.gearhub.services.data.model.ServiceRequestimport gearsoftware.gearhub.servicesimpl.squaregear.FourSquareAccessoryProvider.Companion.SQUAREGEAR_NAMEimport gearsoftware.gearhub.servicesimpl.squaregear.di.SquareGearModuleimport gearsoftware.sap.data.GearCommandsimport gearsoftware.sap.data.GearStatesimport gearsoftware.sap.data.model.WatchTextimport io.reactivex.rxjava3.kotlin.addToimport io.reactivex.rxjava3.kotlin.subscribeByimport timber.log.Timberimport toothpick.ktp.KTPimport toothpick.ktp.delegate.inject@SuppressLint("InlinedApi")@SapService(    name = SQUAREGEAR_NAME,    haveSettings = false,    haveAuthorization = true,    storeUrl = "https://galaxy.store/squareg2",    SquareGearServiceDescription::class)@SapPermissionService(    SquareGearServicePermissions::class)class FourSquareAccessoryProvider : AbstractSapWebService(TAG) {    companion object {        private const val TAG = "FourSquareProvider"        const val SQUAREGEAR_NAME = "SquareGear"        const val SQUAREGEAR_PREF = "SQUAREGEAR_PREF"    }    private val presenter: FourSquarePresenter by inject()    private val squareGearNotificationProvider: SquareGearNotificationProvider by inject<SquareGearNotificationProvider>()    init {        KTP.openScope(Scopes.APP)            .openSubScope(Scopes.SQUAREGEAR)            .installModules(SquareGearModule(this))            .inject(this)    }    override fun onDestroy() {        KTP.closeScope(Scopes.SQUAREGEAR)        super.onDestroy()    }    override fun onLoginIntent() {        presenter.onLoginIntent()    }    fun startLoginActivity() {        startLoginActivity(LoginActivity::class.java)    }    fun sendAuthNeededToWatch() {        sendText(WatchText(SERVICE_CHANNEL_ID, AUTH_NEEDED))    }    fun sendAccessTokenToWatch(accessToken: String, connect: Boolean = false) {        sendText(WatchText(SERVICE_CHANNEL_ID, accessToken), connect)    }    override fun onLogoutIntent() {        presenter.onLogoutIntent()    }    override fun onCreate() {        super.onCreate()        onGearCommand            .filter { it is GearCommands.Text }            .cast(GearCommands.Text::class.java)            .subscribeBy(                onNext = {                    when (it.text.data) {                        AUTH_NEEDED -> {                            presenter.onAuthNeededReceived()                        }                    }                },                onError = Timber::e            )            .addTo(compositeDisposable)        onGearState.filter { it is GearStates.Connected }            .cast(GearStates.Connected::class.java)            .subscribeBy(                onNext = { presenter.onConnectedChanged(it.isConnected) },                onError = Timber::e            )            .addTo(compositeDisposable)    }    override fun setLoginResult(serviceLoginResult: ServiceRequest.ServiceLoginResult) {        presenter.onLogin(serviceLoginResult.result ?: "")    }    override fun getNotificationProvider(): SapNotificationProvider =        squareGearNotificationProvider}