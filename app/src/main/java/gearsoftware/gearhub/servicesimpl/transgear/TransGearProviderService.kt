package gearsoftware.gearhub.servicesimpl.transgearimport android.Manifestimport android.content.*import android.content.pm.PackageManagerimport android.os.Environmentimport android.os.Parcelimport androidx.annotation.RequiresPermissionimport com.google.gson.Gsonimport com.samsung.android.sdk.accessory.SAPeerAgentimport com.samsung.android.sdk.accessoryfiletransfer.SAFileTransferimport gearsoftware.gearhub.BuildConfigimport gearsoftware.gearhub.Rimport gearsoftware.gearhub.di.Scopesimport gearsoftware.gearhub.serviceprovider.AbstractSapServiceimport gearsoftware.gearhub.serviceprovider.SapNotificationProviderimport gearsoftware.gearhub.services.SapPermissionServiceimport gearsoftware.gearhub.services.SapServiceimport gearsoftware.gearhub.servicesimpl.transgear.CancelTransferDialog.Companion.CANCEL_ONEimport gearsoftware.gearhub.servicesimpl.transgear.TransGearProviderService.Companion.TRANSGEAR_NAMEimport gearsoftware.gearhub.servicesimpl.transgear.data.model.gear.FileTransferimport gearsoftware.gearhub.servicesimpl.transgear.data.sources.SAFTSourceimport gearsoftware.gearhub.servicesimpl.transgear.di.TransGearModuleimport gearsoftware.sap.data.GearStatesimport gearsoftware.sap.data.model.WatchTextimport io.reactivex.rxjava3.core.Observableimport io.reactivex.rxjava3.kotlin.addToimport io.reactivex.rxjava3.kotlin.subscribeByimport timber.log.Timberimport toothpick.ktp.KTPimport toothpick.ktp.delegate.inject@SapService(    name = TRANSGEAR_NAME,    haveSettings = false,    haveAuthorization = false,    storeUrl = "https://galaxy.store/transgear",    description = TransGearServiceDescription::class)@SapPermissionService(    TransGearServicePermissions::class)class TransGearProviderService : AbstractSapService("TransGearProvider"), ITransGearView {    companion object {        private const val FOREGROUND_ID = 1957        private const val MULTIFILES_CHANNEL_ID = 104        private const val CANCEL_CHANNEL_ID = 105        private const val CANCEL_ALL_CHANNEL_ID = 106        const val TRANSGEAR_NAME = "TransGear"        const val TRANSGEAR_PREF = "TRANSGEAR_PREF"        const val FOREGROUND_CANCEL_CONNECT_ACTION = "gearsoftware.gearhub.servicesimpl.transgear.FOREGROUND_CANCEL_CONNECT_ACTION"    }    private lateinit var saftSource: SAFTSource    private val transgearNotificationProvider: TransGearNotificationProvider by inject<TransGearNotificationProvider>()    private val presenter: TransGearPresenter by inject()    private val receiver = object : BroadcastReceiver() {        @RequiresPermission(allOf = [Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE])        override fun onReceive(arg0: Context, intent: Intent) {            when (intent.action) {                CancelTransferDialog.DIALOG_RESULT -> {                    if (intent.getStringExtra(CancelTransferDialog.DIALOG_RESULT) == CancelTransferDialog.OK_CLICK) {                        if (intent.getBooleanExtra(CANCEL_ONE, false)) {                            presenter.onCancelCurrentTransfer()                        } else {                            presenter.onCancelAllTransfer()                        }                    }                }                TransGearActivity.SEND_FILES_ACTION -> {                    if (intent.hasExtra(TransGearActivity.SEND_FILES_EXTRA)) {                        presenter.onTransferFiles(intent.getStringExtra(TransGearActivity.SEND_FILES_EXTRA)!!)                    }                }            }        }    }    init {        KTP.openScope(Scopes.APP)            .openSubScope(Scopes.TRANSGEAR)            .installModules(TransGearModule(this, saftSource, this))            .inject(this)    }    private fun setComponentEnabled(name: String, enabled: Boolean) {        try {            applicationContext.packageManager.setComponentEnabledSetting(                ComponentName(BuildConfig.APPLICATION_ID, String.format("%s.%s", BuildConfig.APPLICATION_ID, name)),                if (enabled) PackageManager.COMPONENT_ENABLED_STATE_ENABLED else PackageManager.COMPONENT_ENABLED_STATE_DISABLED, PackageManager.DONT_KILL_APP            )        } catch (ignored: Exception) {        }    }    private fun setRingtonesActivityEnabled(enabled: Boolean) {        setComponentEnabled("TransGearRingtones", enabled)    }    private fun setActivityAliasEnabled(enabled: Boolean) {        setRingtonesActivityEnabled(enabled)        setComponentEnabled("transgear.TransGearActivity", enabled)    }    //TODO move to broadcastReceiver    /*    override fun onStartCommand(intent: Intent?, i: Int, i1: Int): Int {        when (intent?.action) {            TransGearActivity.SEND_FILES_ACTION -> if (intent.hasExtra(TransGearActivity.SEND_FILES_EXTRA)) {                presenter.onTransferFiles(intent.getStringExtra(TransGearActivity.SEND_FILES_EXTRA)!!)            }            FOREGROUND_CANCEL_CONNECT_ACTION -> presenter.onCancelAllTransfer()        }        if (intent?.getStringExtra(CANCEL_WAIT) != null) {            presenter.onCancelAllTransfer()        }        setActivityAliasEnabled(isChecked)        return super.onStartCommand(intent, i, i1)    }*/    /*private fun isRingtonesAvailable(model: String): Boolean =            when (model) {                "",                    /* case "SM-R720":                case "SM-R730":                case "SM-R732":*/                "SM-R750", "SM-R750A", "SM-R750B", "SM-R750D", "SM-R750J", "SM-R750T", "SM-R750W",                    //Gear S2 с 3G                "SM-R730V" -> true                else -> false            }*/    override fun onCreate() {        super.onCreate()        //saftSource = SAFTSource(onPeerAgentConnected, this, this.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS)!!)        saftSource = SAFTSource(Observable.fromCallable { SAPeerAgent(Parcel.obtain()) }, this, this.getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS)!!)////        registerReceiver(receiver, IntentFilter(CancelTransferDialog.DIALOG_RESULT))//        registerReceiver(receiver, IntentFilter(TransGearActivity.SEND_FILES_ACTION))        setActivityAliasEnabled(isChecked)        onGearState            .filter { it is GearStates.Connected }            .cast(GearStates.Connected::class.java)            .subscribeBy(                onNext = { presenter.onConnected(it.isConnected) },                onError = Timber::e            )            .addTo(compositeDisposable)        onGearCommand            .filter { it is gearsoftware.sap.data.GearCommands.Text }            .cast(gearsoftware.sap.data.GearCommands.Text::class.java)            .subscribeBy(                onNext = {                    when (it.text.data) {                        GearCommands.CANCEL -> presenter.onCancel(it.text.data)                        GearCommands.CANCEL_ALL -> presenter.onCancelAllTransfer()                        GearCommands.REPEAT -> presenter.onRepeat()                        else -> presenter.onReceiveFilesListFromGear(it.text.data)                    }                },                onError = Timber::e            )            .addTo(compositeDisposable)    }    override fun onDestroy() {        KTP.closeScope(Scopes.TRANSGEAR)        unregisterReceiver(receiver)        saftSource.close()        super.onDestroy()    }    override fun getNotificationProvider(): SapNotificationProvider =        transgearNotificationProvider    override fun clearTransferList() {        transgearNotificationProvider.cancelAll()    }    override fun showTransferProgress(progress: Int, currentFile: String?, files: List<String>) {        transgearNotificationProvider.notify(FOREGROUND_ID, transgearNotificationProvider.getTransferNotificationProgress(progress, currentFile, files))    }    override fun updateTransferList(filesLeft: Int, currentTransferPath: String, fileNames: List<String>) {        transgearNotificationProvider.notify(FOREGROUND_ID, transgearNotificationProvider.getTransferNotificationPrepare(currentTransferPath, fileNames))    }    fun showError(code: Int) {        transgearNotificationProvider.notify(            FOREGROUND_ID,            when (code) {                SAFileTransfer.ERROR_PEER_AGENT_REJECTED -> transgearNotificationProvider.getTransferNotificationError(getString(R.string.uploading_canceled))                SAFileTransfer.ERROR_COMMAND_DROPPED -> transgearNotificationProvider.getTransferNotificationError(getString(R.string.error_command_dropped))                SAFileTransfer.ERROR_CONNECTION_LOST -> transgearNotificationProvider.getTransferNotificationError(getString(R.string.error_connection_lost))                SAFileTransfer.ERROR_FILE_IO -> transgearNotificationProvider.getTransferNotificationError(getString(R.string.error_file_io))                SAFileTransfer.ERROR_PEER_AGENT_BUSY -> transgearNotificationProvider.getTransferNotificationError(getString(R.string.error_peer_agent_busy))                SAFileTransfer.ERROR_PEER_AGENT_NO_RESPONSE -> transgearNotificationProvider.getTransferNotificationError(getString(R.string.error_peer_agent_no_response))                SAFileTransfer.ERROR_REQUEST_NOT_QUEUED -> transgearNotificationProvider.getTransferNotificationError(getString(R.string.error_request_not_queued))                SAFileTransfer.ERROR_SPACE_NOT_AVAILABLE -> transgearNotificationProvider.getTransferNotificationError(getString(R.string.error_space_not_available))                else -> transgearNotificationProvider.getTransferNotificationError(getString(R.string.error_unknown))            }.build()        )    }    override fun sendFilesListToWatch(files: List<FileTransfer>) {        sendText(WatchText(MULTIFILES_CHANNEL_ID, Gson().toJson(files)), true)    }    fun send(file: FileTransfer) {        sendText(WatchText(MULTIFILES_CHANNEL_ID, Gson().toJson(listOf(file))), true)    }    fun cancel(file: FileTransfer) {        sendText(WatchText(CANCEL_CHANNEL_ID, Gson().toJson(file)), true)    }    fun cancelAll() {        sendText(WatchText(CANCEL_ALL_CHANNEL_ID, GearCommands.CANCEL_ALL), true)    }}